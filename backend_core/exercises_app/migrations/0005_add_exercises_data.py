# Generated by Django 4.2.4 on 2024-08-09 08:02
import json
import os
from django.db import migrations

current_directory = os.path.dirname(__file__)
file_path = os.path.join(current_directory, 'exercises_data.json')


class ExerciseDataLoader:
    def __init__(self, file_path=None):
        self.file_path = file_path
        self.title = None
        self.description = None
        self.ask1 = None
        self.ask2 = None
        self.difficult = None
        self.points = None
        self.type = None
        self.advanced_level = None
        self.exam = None
        self.data = None
        self.subsubsection = None
        self.subsection = None
        self.section = None
        self.Exercise = None
        self.Section = None
        self.Subsection = None
        self.Subsubsection = None

        if self.file_path:
            self.data = self.read_json_from_file(self.file_path)

    def read_json_from_file(self, file_path):
        try:
            with open(file_path, 'r') as file:
                data = json.load(file)
                return data
        except FileNotFoundError:
            print("*-" * 50)
            print(f'File not found: {file_path}')
            print("*-" * 50)

        except json.JSONDecodeError as e:
            print("*-" * 50)
            print(f'Error decoding JSON from the file: {file_path}')
            print(f'Error: {e.msg}')
            print(f'Line: {e.lineno}, Column: {e.colno}')
            print("*-" * 50)

    def add_exercise_data(self, apps, schema_editor):
        self.Exercise = apps.get_model('exercises_app', 'Exercise')
        self.Subsubsection = apps.get_model('exercises_app', 'Subsubsection')
        self.Subsection = apps.get_model('exercises_app', 'Subsection')
        self.Section = apps.get_model('exercises_app', 'Section')

        for exercise in self.data:
            self.title = exercise['title']
            self.description = exercise['description']
            self.ask1 = exercise.get('ask1', None)
            self.ask2 = exercise.get('ask2', None)
            self.difficult = exercise['difficult']
            self.points = exercise['points']
            self.type = exercise['type']
            self.advanced_level = exercise['advanced_level']
            self.exam = exercise['exam']
            self.section = self.Section.objects.get(name=exercise['section'])
            if 'subsubsection' in exercise:
                self.subsubsection = self.Subsubsection.objects.get(name=exercise['subsubsection'])
            if 'subsection' in exercise:
                self.subsection = self.Subsection.objects.get(name=exercise['subsection'])

            self.Exercise.objects.create(
                title=self.title,
                description=self.description,
                section=self.section,
                subsection=self.subsection,
                subsubsection=self.subsubsection,
                ask1=self.ask1,
                ask2=self.ask2,
                difficult=self.difficult,
                points=self.points,
                type=self.type,
                advanced_level=self.advanced_level,
                exam=self.exam
            )


class AnswerDataLoader(ExerciseDataLoader):
    def __init__(self, file_path=None):
        super().__init__(file_path)
        self.exercise = None
        self.answer = None
        self.correct = None
        self.second_set = None
        self.Answer = None
        self.Exercise = None

    def add_answer_data(self, apps, schema_editor):
        self.Answer = apps.get_model('exercises_app', 'Answer')
        self.Exercise = apps.get_model('exercises_app', 'Exercise')

        for ex in self.data:
            exercise = self.Exercise.objects.get(title=ex['title'])
            if 'answers' in ex:
                for answer in ex['answers']:
                    self.Answer.objects.create(
                        exercise=exercise,
                        answer=answer['answer'],
                        correct=answer['correct'],
                        second_set=answer['second_set']
                    )


class ChartsDataLoader(ExerciseDataLoader):
    def __init__(self, file_path=None):
        super().__init__(file_path)
        self.function_type = None
        self.coefficients = None
        self.description = None
        self.legend = None
        self.Function = None
        self.Exercise = None
        self.Answer = None
        self.answer = None
        self.answers = None
        self.exercises = []

    def add_charts_data(self, apps, schema_editor):
        self.Function = apps.get_model('exercises_app', 'Function')
        self.Exercise = apps.get_model('exercises_app', 'Exercise')
        self.Answer = apps.get_model('exercises_app', 'Answer')

        for chart in self.data:
            self.function_type = chart['function_type']
            try:
                if chart['exercises_id']:
                    self.exercises = [self.Exercise.objects.get(pk=id) for id in chart['exercises_id']]
            except self.Exercise.DoesNotExist:
                self.exercises = []
                print("*-" * 50)
                print(f'Exercise with ID {chart["exercises_id"]} does not exist.')
                print("*-" * 50)
                continue
            if chart['answer_no_in_exercise']:
                self.answers = self.Answer.objects.filter(exercise_id=self.exercises[0])
                self.answer = self.answers.get(answer=chart['answer_no_in_exercise'])
            else:
                self.answers = []
                self.answer = None
            if chart['description']:
                self.description = chart['description']
            else:
                self.description = None
            if chart['legend']:
                self.legend = chart['legend']
            else:
                self.legend = None
            if chart['coefficients']:
                self.coefficients = chart['coefficients']
            else:
                self.coefficients = None
            function = self.Function.objects.create(
                function_type=self.function_type,
                answer=self.answer,
                description=self.description,
                legend=self.legend,
                a=chart['a'],
                b=chart['b'],
                c=chart['c'],
                coefficients=self.coefficients,
                x_start=chart['x_start'],
                x_end=chart['x_end'],
                x_step=chart['x_step'],
                x_offset=chart['x_offset'],
                y_step=chart['y_step'],
                y_offset=chart['y_offset'],

            )
            if self.exercises:
                function.exercises.add(*self.exercises)


class AdditionalTextDataLoader(ExerciseDataLoader):
    def __init__(self, file_path=None):
        super().__init__(file_path)
        self.text = None
        self.place = None
        self.exercise = None
        self.answer = None
        self.true_answer = None
        self.Exercise = None
        self.Answer = None
        self.AdditionalText = None
        self.correct_answer_index = None
        self.correct_answer = None

    def add_additional_text_data(self, apps, schema_editor):
        """if exercise type = 7 set correct_answer in additional_text as a index of correct answer in answers"""
        self.AdditionalText = apps.get_model('exercises_app', 'AdditionalText')
        self.Exercise = apps.get_model('exercises_app', 'Exercise')
        self.Answer = apps.get_model('exercises_app', 'Answer')
        for ex in self.data:
            self.exercise = self.Exercise.objects.get(title=ex['title'])
            answers = self.Answer.objects.filter(exercise=self.exercise)
            if 'additional_texts' in ex:
                for text in ex['additional_texts']:
                    additional_text = self.AdditionalText.objects.filter(text=text['text']).first()
                    print("*-" * 50)
                    print(f'Additional text: {additional_text}')
                    print("*-" * 50)
                    if additional_text:
                        additional_text.exercise.add(self.exercise)
                    else:
                        additional_text = self.AdditionalText.objects.create(
                            text=text['text'],
                            place=text['place'],
                            true_answer=self.correct_answer
                        )
                        additional_text.exercise.add(self.exercise)
                    if 'correct_answer' in text:
                        # set correct answer in additional_text as a index of correct answer in answers
                        self.correct_answer = answers.get(answer=text['correct_answer'])
                        self.correct_answer_index = next(
                            (index for index, answer in enumerate(answers) if answer == self.correct_answer), None)
                        print("*-" * 50)
                        print(f'Correct answer: {self.correct_answer.answer} index: {self.correct_answer_index}')
                        print("*-" * 50)
                        # letter = chr(65 + self.correct_answer_index) if self.correct_answer_index else None
                        letter = self.correct_answer.answer
                        print("*-" * 50)
                        print(f'Letter: {letter}')
                        print("*-" * 50)
                        self.correct_answer.answer = f'{additional_text.text}: {letter}'
                        self.correct_answer.correct = True
                        self.correct_answer.save()
                    else:
                        self.correct_answer = None
                        self.correct_answer_index = None


class ImagesDataLoader(ExerciseDataLoader):
    def __init__(self, file_path=None):
        super().__init__(file_path)
        self.images = None
        self.exercise = None
        self.Exercise = None
        self.Image = None
        self.Answer = None
        self.images_path = 'images/'

    def add_image_data(self, apps, schema_editor):
        self.Image = apps.get_model('exercises_app', 'Image')
        self.Exercise = apps.get_model('exercises_app', 'Exercise')
        self.Answer = apps.get_model('exercises_app', 'Answer')
        for ex in self.data:
            self.exercise = self.Exercise.objects.get(title=ex['title'])
            self.images = self.Image.objects.filter(exercise=self.exercise)
            answers = self.Answer.objects.filter(exercise=self.exercise)
            if 'images' in ex:
                for img in ex['images']:
                    image = self.Image.objects.filter(image=img['image'])
                    if image:
                        image.exercise.add(self.exercise)
                    else:
                        image_path = self.images_path + img['image']
                        image = self.Image.objects.create(
                            image=image_path,
                            description=img['description']
                        )
                        image.exercise.add(self.exercise)
            for ans in ex['answers']:
                if 'images' in ans:
                    answer = answers.get(answer=ans['answer'])
                    for img in ans['images']:
                        image_path = self.images_path + img['image']
                        self.Image.objects.create(
                            image=image_path,
                            description=img['description'],
                            answer=answer
                        )


def add_exercise_data(apps, schema_editor):
    exercise_loader = ExerciseDataLoader(file_path=os.path.join(current_directory, 'exercises_data.json'))
    exercise_loader.add_exercise_data(apps, schema_editor)
    answer_loader = AnswerDataLoader(file_path=os.path.join(current_directory, 'exercises_data.json'))
    answer_loader.add_answer_data(apps, schema_editor)
    charts_loader = ChartsDataLoader(file_path=os.path.join(current_directory, 'charts_data.json'))
    charts_loader.add_charts_data(apps, schema_editor)
    additional_text_loader = AdditionalTextDataLoader(file_path=os.path.join(current_directory, 'exercises_data.json'))
    additional_text_loader.add_additional_text_data(apps, schema_editor)
    images_loader = ImagesDataLoader(file_path=os.path.join(current_directory, 'exercises_data.json'))
    images_loader.add_image_data(apps, schema_editor)


class Migration(migrations.Migration):
    dependencies = [
        ('exercises_app', '0004_add_subsubsection_data'),
    ]

    operations = [
        migrations.RunPython(add_exercise_data),
    ]
